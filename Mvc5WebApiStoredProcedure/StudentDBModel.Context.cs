//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mvc5WebApiStoredProcedure
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StudentDBContext : DbContext
    {
        public StudentDBContext()
            : base("name=StudentDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<StudentMaster> StudentMasters { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
    
        public virtual int USP_Student_Delete(Nullable<int> stdID)
        {
            var stdIDParameter = stdID.HasValue ?
                new ObjectParameter("StdID", stdID) :
                new ObjectParameter("StdID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Student_Delete", stdIDParameter);
        }
    
        public virtual ObjectResult<string> USP_Student_Insert(string stdName, string email, string phone, string address)
        {
            var stdNameParameter = stdName != null ?
                new ObjectParameter("StdName", stdName) :
                new ObjectParameter("StdName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_Student_Insert", stdNameParameter, emailParameter, phoneParameter, addressParameter);
        }
    
        public virtual ObjectResult<USP_Student_Select_Result> USP_Student_Select(string stdName, string email)
        {
            var stdNameParameter = stdName != null ?
                new ObjectParameter("StdName", stdName) :
                new ObjectParameter("StdName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Student_Select_Result>("USP_Student_Select", stdNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<string> USP_Student_Update(Nullable<int> stdID, string stdName, string email, string phone, string address)
        {
            var stdIDParameter = stdID.HasValue ?
                new ObjectParameter("StdID", stdID) :
                new ObjectParameter("StdID", typeof(int));
    
            var stdNameParameter = stdName != null ?
                new ObjectParameter("StdName", stdName) :
                new ObjectParameter("StdName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_Student_Update", stdIDParameter, stdNameParameter, emailParameter, phoneParameter, addressParameter);
        }
    
        public virtual int AddNewEmployee(string name, string email, string country, Nullable<int> projectId, string managerName, string profileImage)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            var profileImageParameter = profileImage != null ?
                new ObjectParameter("ProfileImage", profileImage) :
                new ObjectParameter("ProfileImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewEmployee", nameParameter, emailParameter, countryParameter, projectIdParameter, managerNameParameter, profileImageParameter);
        }
    
        public virtual int DeleteEmploye(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmploye", idParameter);
        }
    
        public virtual ObjectResult<ReadAllEmployee_Result> ReadAllEmployee(string name, string country, string managerName)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadAllEmployee_Result>("ReadAllEmployee", nameParameter, countryParameter, managerNameParameter);
        }
    
        public virtual int UpdateEmployee(Nullable<int> id, string name, string email, string country, string managerName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployee", idParameter, nameParameter, emailParameter, countryParameter, managerNameParameter);
        }
    }
}
